<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on bnmoch3</title><link>https://www.bnmoch3.org/tags/golang/</link><description>Recent content in Golang on bnmoch3</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 22 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bnmoch3.org/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging in Go</title><link>https://www.bnmoch3.org/p/logging/</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.bnmoch3.org/p/logging/</guid><description>Best practices, Logging levels, structured logging, Logging &amp;amp; Telemetry (Metrics, Tracing), Audit logs</description></item><item><title>Handling panics from goroutines you've spawned</title><link>https://www.bnmoch3.org/notes/2023/goroutine-panics/</link><pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate><guid>https://www.bnmoch3.org/notes/2023/goroutine-panics/</guid><description>It&amp;rsquo;s one thing to handle a panic that&amp;rsquo;s occured within a function. It&amp;rsquo;s an entirely different affair to handle a panic that occured within a goroutine that&amp;rsquo;s been spawned.</description></item><item><title>Go data-structure tricks: google/Btree</title><link>https://www.bnmoch3.org/notes/2020/go-btree-data-structure/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.bnmoch3.org/notes/2020/go-btree-data-structure/</guid><description>A couple of interesting approaches to concurrency and memory allocation from the Go google/btree package</description></item><item><title>Go Channels Suffice for Synchronization</title><link>https://www.bnmoch3.org/notes/2020/go-channels-concurrency-sync/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><guid>https://www.bnmoch3.org/notes/2020/go-channels-concurrency-sync/</guid><description>Or how to implement Futures/Promises in Go without having to juggle locks and waitgroups</description></item><item><title>Golang Custom Loggers: using Postgres and Leveldb</title><link>https://www.bnmoch3.org/notes/2019/go-custom-logger-pg-leveldb/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.bnmoch3.org/notes/2019/go-custom-logger-pg-leveldb/</guid><description>Coupling logging to the some destination (in this case Postgres and leveldb) within the application itself isn&amp;rsquo;t by any means a good idea. Still, given the flexibility interfaces in Go provide, why not give it a try ¯\&lt;em>(ツ)&lt;/em>/¯</description></item></channel></rss>